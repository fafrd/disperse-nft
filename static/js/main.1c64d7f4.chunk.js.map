{"version":3,"sources":["Validation.jsx","App.jsx","index.jsx"],"names":["Validation","valid","this","props","className","React","Component","SUPPORTED_CHAINIDS","NETWORK_NAMES","1","4","DISPERSE_CONTRACT_ADDR","App","state","ethereum","provider","signer","connectedAccounts","walletStatus","chainId","contract","recipients","parsedRecipients","ids","parsedIds","quantities","parsedQuantities","quantityToggle","contractError","recipientsError","idsError","quantitiesError","txnHash","failureReason","handleChange","bind","handleSubmit","connectWallet","switchNetwork","a","setWalletState","console","log","window","ethers","providers","Web3Provider","getSigner","getNetwork","network","listAccounts","JSON","stringify","length","debug","includes","setState","on","request","method","Error","event","target","id","desiredChainId","params","toString","map","x","match","parse","replace","every","calcQtyFromIds","validateQuantities","qtys","name","value","validateContract","validateRecipients","validateIds","warn","nftContractAddr","error","Contract","ERC1155_ABI","nftContract","ownerAddresses","Array","fill","balanceOfBatch","balances","i","parseInt","err","disperseContractAddr","isApprovedForAll","isApproved","setApprovalForAll","tx","hash","wait","receipt","DISPERSE_ABI","disperseContract","disperse","contractPreview","recipientsPreview","idsPreview","quantitiesPreview","buttonDisabled","quantityValue","quantityDisabled","networkName","connectionStatusMessage","href","type","onClick","autoComplete","htmlFor","onChange","maxLength","placeholder","checked","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c64d7f4.chunk.js","sourcesContent":["import React from 'react';\n\nclass Validation extends React.Component {\n  render() {\n      const valid = this.props.valid ? \"✅\" : \"🤔\";\n      return <span className=\"valid\">{ valid }</span>;\n  }\n}\n\nexport default Validation;","import React from 'react';\nimport { ethers } from \"ethers\";\n\nimport './App.css';\nimport Validation from './Validation.jsx';\nimport DISPERSE_ABI from './DisperseNft.abi.json';\nimport ERC1155_ABI from './ERC1155.abi.json';\n\n//const SUPPORTED_CHAINIDS = [1, 4];\nconst SUPPORTED_CHAINIDS = [4];\nconst NETWORK_NAMES = {1: \"Ethereum Mainnet\", 4: \"Rinkeby Testnet\"};\nconst DISPERSE_CONTRACT_ADDR = {\n  1: \"\",\n  4: \"0x7b194fBF78eeb62044985d37c9c4cDF6F4f0CA28\",\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ethereum: null,\n      provider: null,\n      signer: null,\n      connectedAccounts: [],\n      walletStatus: 'no-wallet-detected',\n      chainId: '',\n      contract: '',\n      recipients: '',\n      parsedRecipients: [],\n      ids: '',\n      parsedIds: [],\n      quantities: '',\n      parsedQuantities: [],\n      quantityToggle: 'quantityToggleManual',\n      contractError: 'empty',\n      recipientsError: 'empty',\n      idsError: 'empty',\n      quantitiesError: 'empty',\n      txnHash: '',\n      failureReason: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.connectWallet = this.connectWallet.bind(this);\n    this.switchNetwork = this.switchNetwork.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.setWalletState();\n  }\n\n  async setWalletState() {\n    console.log(\"setWalletState\");\n\n    const { ethereum } = window;\n    let provider = null, signer = null, walletStatus = \"wallet-not-connected\";\n    if (ethereum) {\n      provider = new ethers.providers.Web3Provider(ethereum);\n      signer = provider.getSigner();\n      const network = await provider.getNetwork();\n\n      const connectedAccounts = await provider.listAccounts();\n      console.log(\"connected accounts: \" + JSON.stringify(connectedAccounts));\n\n      if (connectedAccounts.length === 0) {\n        console.debug(\"Setting wallet state: wallet-not-connected\");\n        walletStatus = \"wallet-not-connected\";\n      } else if (!SUPPORTED_CHAINIDS.includes(network.chainId)) {\n        console.debug(\"Setting wallet state: wrong-network\");\n        walletStatus = \"wrong-network\";\n      } else {\n        console.debug(\"Setting wallet state: empty (everything good)\");\n        walletStatus = \"\";\n      }\n\n      this.setState({\n        ethereum: ethereum,\n        provider: provider,\n        signer: signer,\n        chainId: network.chainId,\n        connectedAccounts: connectedAccounts,\n        walletStatus: walletStatus\n      });\n\n      // set up callback for network change\n      ethereum.on(\"chainChanged\", this.setWalletState.bind(this));\n\n      // set up callback for account change\n      ethereum.on(\"accountsChanged\", this.setWalletState.bind(this));\n    }\n  }\n\n  async connectWallet() {\n    await this.state.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    const accts = await this.state.provider.listAccounts();\n    if (accts.length > 0) {\n      await this.setWalletState();\n    } else {\n      throw Error(\"Connected to ethereum but provider.listAccounts() returned empty!\");\n    }\n  }\n\n  async switchNetwork(event) {\n    let desiredChainId;\n    switch (event.target.id) {\n      case \"button-ethereum\":\n        desiredChainId = 1;\n        break;\n      case \"button-rinkeby\":\n        desiredChainId = 4;\n        break;\n      default:\n        throw new Error(\"unexpected switch fallthrough for button id \" + event.target.id);\n    }\n\n    await window.ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: \"0x\" + desiredChainId.toString(16) }],\n    });\n\n    this.setWalletState();\n  }\n\n  calcQtyFromIds(parsedIds) {\n    return parsedIds.map(x => \"1\");\n  }\n\n  validateContract(contract) {\n    if (!contract) {\n      this.setState({contractError: \"empty\"});\n    } else if (!contract.match(/^0x[a-fA-F0-9]{40}$/)) {\n      this.setState({contractError: \"Unable to parse contract address\"});\n    } else {\n      this.setState({contractError: \"\"});\n    }\n  }\n\n  validateRecipients(recipients) {\n    this.setState({parsedRecipients: []});\n    if (!recipients) {\n      this.setState({recipientsError: \"empty\"});\n    } else {\n      try {\n        const parsedRecipients = JSON.parse(recipients.replace(/'/g,'\"'));\n\n        const validAddresses = parsedRecipients.every(x => x.match(/^0x[a-fA-F0-9]{40}$/));\n        if (!validAddresses) {\n          this.setState({recipientsError: \"Unable to parse recipient address.\"});\n        } else {\n          this.setState({recipientsError: \"\"});\n          this.setState({parsedRecipients: parsedRecipients});\n        }\n      } catch {\n        this.setState({recipientsError: \"Unable to parse recipients array.\"});\n      }\n    }\n  }\n\n  validateIds(ids) {\n    this.setState({parsedIds: []});\n    if (!ids) {\n      this.setState({idsError: \"empty\"});\n    } else {\n      try {\n        const parsedIds = JSON.parse(ids.replace(/'/g,'\"'));\n\n        if (!parsedIds.every(x => typeof x === \"string\")) {\n          this.setState({idsError: \"Unable to parse ID as string.\"});\n        } else {\n          // success\n          this.setState({idsError: \"\"});\n          this.setState({parsedIds: parsedIds});\n\n          if (this.state.quantityToggle === \"quantityToggleAuto\") {\n            // Updating ID will also update quantities IF the qty toggle is set to Automatic\n            this.setState({parsedQuantities: this.calcQtyFromIds(parsedIds)});\n          } else {\n            // else, re-validate qtys given new ids\n            this.validateQuantities(parsedIds, this.state.quantities);\n          }\n        }\n      } catch {\n        this.setState({idsError: \"Unable to parse IDs array.\"});\n      }\n    }\n  }\n\n  validateQuantities(ids, qtys) {\n    if (this.state.quantityToggle === \"quantityToggleAuto\") {\n      this.setState({quantitiesError: \"\"}); // do nothing; updated during ID validation\n    } else if (!qtys) {\n      this.setState({parsedQuantities: []});\n      this.setState({quantitiesError: \"empty\"});\n    } else {\n      this.setState({parsedQuantities: []});\n      try {\n        const parsedQuantities = JSON.parse(qtys.replace(/'/g,'\"'));\n\n        if (!parsedQuantities.every(x => typeof x === \"string\")) {\n          this.setState({quantitiesError: \"Unable to parse quantity as string.\"});\n        } else if (parsedQuantities.length !== ids.length) {\n          this.setState({quantitiesError: `Invalid length \\\n            (found ${ids.length} IDs, but ${parsedQuantities.length} quantities)`});\n        } else {\n          this.setState({quantitiesError: \"\"});\n          this.setState({parsedQuantities: parsedQuantities});\n        }\n      } catch {\n        this.setState({quantitiesError: \"Unable to parse quantities array.\"});\n      }\n    }\n  }\n\n  handleChange(event) {\n    // Update state\n    this.setState({[event.target.name]: event.target.value});\n\n    // validate newly set state\n    switch (event.target.name) {\n      case \"contract\":\n        this.validateContract(event.target.value);\n        break;\n      case \"recipients\":\n        this.validateRecipients(event.target.value);\n        break;\n      case \"ids\":\n        this.validateIds(event.target.value);\n        break;\n      case \"quantities\":\n        this.validateQuantities(this.state.parsedIds, event.target.value);\n        break;\n      case \"quantityToggle\":\n        if (event.target.value === \"quantityToggleAuto\") {\n          // build quantity dynamically depending on input.\n          this.setState({parsedQuantities: this.calcQtyFromIds(this.state.parsedIds)});\n        }\n        break;\n      default:\n        console.warn(\"unexpected switch fallthrough for event \" + event.target.name);\n    }\n  }\n\n  async handleSubmit() {\n    console.log(\"Dispersing tokens\");\n\n    // Step 1: Check balance\n    // Step 2: Set approval if necessary\n    // Step 3: Disperse\n\n    let nftContractAddr, recipients, ids, quantities;\n    try {\n      nftContractAddr = this.state.contract;\n      recipients = JSON.parse(this.state.recipients);\n      ids = JSON.parse(this.state.ids);\n      if (this.state.quantityToggle === \"quantityToggleAuto\")\n        quantities = this.state.parsedQuantities;\n      else\n        quantities = JSON.parse(this.state.quantities);\n    } catch (err) {\n      console.error(err);\n      this.setState({\n        failureReason: \"Unable to parse parameters\",\n        walletStatus: \"transaction-fail\"\n      });\n      return;\n    }\n\n    console.log(`Ready to commit transaction. Parameters:\n  contract: \\t${JSON.stringify(nftContractAddr)},\n  recipients: \\t${JSON.stringify(recipients)},\n  token ids: \\t${JSON.stringify(ids)},\n  quantities: \\t${JSON.stringify(quantities)},\n  binary data: \\t\"0x\"\n    `);\n\n    let nftContract, balances;\n    try {\n      nftContract = await new ethers.Contract(this.state.contract, ERC1155_ABI, this.state.signer);\n      const ownerAddresses = Array(ids.length).fill(this.state.connectedAccounts[0]);\n      balances = await nftContract.balanceOfBatch(ownerAddresses, ids);\n      console.log(\"balances: \");\n      console.log(balances)\n\n    } catch (err) {\n      console.error(err);\n      this.setState({\n        failureReason: \"Unable to determine contract balance. Did you provide a valid ERC-1155 NFT contract address?\",\n        walletStatus: \"transaction-fail\"\n      });\n      return;\n    }\n\n    for (var i = 0; i < ids.length; i++) {\n      if (quantities[i] > parseInt(balances[i], 16)) {\n        const err = `Insufficient balance for token ID ${ids[i]}. You are trying to send ${quantities[i]}, but have ${balances[i]}.`;\n        console.error(err);\n        this.setState({\n          failureReason: err,\n          walletStatus: \"transaction-fail\"\n        });\n        return;\n      }\n    }\n\n    const disperseContractAddr = DISPERSE_CONTRACT_ADDR[this.state.chainId];\n    if (!disperseContractAddr) {\n      const err = \"No contract address specified for chainId \" + this.state.chainId;\n      console.error(err);\n      this.setState({\n        failureReason: err,\n        walletStatus: \"transaction-fail\"\n      });\n      return;\n    }\n\n    this.setState({walletStatus: \"approve-pending\"});\n\n    let isApproved;\n    try {\n      isApproved = await nftContract.isApprovedForAll(this.state.connectedAccounts[0], disperseContractAddr);\n    } catch (err) {\n      console.error(err);\n      this.setState({\n        failureReason: \"Unable to determine contract approval. Did you provide a valid ERC-1155 NFT contract address?\",\n        walletStatus: \"transaction-fail\"\n      });\n      return;\n    }\n\n    console.log(\"existing approval status: \" + isApproved);\n\n    if (!isApproved) {\n      try {\n        const tx = await nftContract.setApprovalForAll(disperseContractAddr, true);\n        this.setState({\n          txnHash: tx.hash,\n          walletStatus: \"approve-in-progress\"\n        });\n\n        const receipt = await tx.wait();\n        console.log(\"Transaction success. receipt: \");\n        console.log(receipt);\n      } catch (err) {\n        console.error(err);\n        this.setState({\n          failureReason: JSON.stringify(err, null, 2),\n          walletStatus: \"transaction-fail\"\n        });\n        return;\n      }\n    }\n\n    this.setState({walletStatus: \"disperse-pending\"});\n\n    const disperseContract = await new ethers.Contract(disperseContractAddr, DISPERSE_ABI, this.state.signer);\n    try {\n      const tx = await disperseContract.disperse(\n        nftContractAddr,\n        recipients,\n        ids,\n        quantities,\n        \"0x\"\n      );\n\n      this.setState({\n        txnHash: tx.hash,\n        walletStatus: \"disperse-in-progress\"\n      });\n\n      const receipt = await tx.wait();\n      console.log(\"Transaction success. receipt: \");\n      console.log(receipt);\n      this.setState({walletStatus: \"disperse-success\"});\n    } catch (err) {\n      console.error(err);\n      this.setState({\n        failureReason: JSON.stringify(err, null, 2),\n        walletStatus: \"transaction-fail\"\n      });\n    }\n  }\n\n  render() {\n    let contractPreview, recipientsPreview, idsPreview, quantitiesPreview;\n\n    if (this.state.contractError) {\n      contractPreview = <i>{this.state.contractError}</i>;\n    } else {\n      contractPreview = this.state.contract;\n    }\n\n    if (this.state.recipientsError) {\n      recipientsPreview = <i>{this.state.recipientsError}</i>;\n    } else {\n      if (this.state.parsedRecipients.length === 1) {\n        recipientsPreview = \"1 recipient\";\n      } else {\n        recipientsPreview = `${this.state.parsedRecipients.length} recipients`;\n      }\n    }\n\n    if (this.state.idsError) {\n      idsPreview = <i>{this.state.idsError}</i>;\n    } else {\n      if (this.state.parsedIds.length === 1) {\n        idsPreview = \"1 id\";\n      } else {\n        idsPreview = `${this.state.parsedIds.length} ids`;\n      }\n    }\n\n    if (this.state.quantityToggle === 'quantityToggleAuto') {\n      quantitiesPreview = \"1 of each ID, for each recipient\";\n    } else {\n      if (this.state.quantitiesError) {\n        quantitiesPreview = <i>{this.state.quantitiesError}</i>;\n      } else {\n        quantitiesPreview = this.state.quantities;\n        if (this.state.parsedQuantities.length === 1) {\n          quantitiesPreview = \"1 quantity\";\n        } else {\n          quantitiesPreview = `${this.state.parsedQuantities.length} quantities`;\n        }\n      }\n    }\n\n    const buttonDisabled = this.state.contractError\n      || this.state.recipientsError\n      || this.state.idsError\n      || (this.state.quantitiesError && this.state.quantityToggle === 'quantityToggleManual');\n\n    // Set quantity value dynamically, depending on manual/auto selection\n    let quantityValue = this.state.quantities;\n    let quantityDisabled = false;\n    if (this.state.quantityToggle === \"quantityToggleAuto\") {\n      quantityValue = JSON.stringify(this.state.parsedQuantities);\n      quantityDisabled = true;\n    }\n\n    const networkName = NETWORK_NAMES[this.state.chainId] ? NETWORK_NAMES[this.state.chainId] : \"unsupported network\";\n    const connectionStatusMessage = (this.state.connectedAccounts.length > 0 && this.state.provider) ? <p>Wallet connected to {networkName}.</p> : null;\n\n    return <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Disperse NFT</h1>\n        <h2>Batch-send your ERC1155 tokens to one or more recipients.</h2>\n        <p>\n          This tool allows you to send many ERC-1155 NFTs in a single transaction. This only works for NFTs that support multiple <i>copies</i> of the same NFT, such as Rarible multiples, or Curio Cards.\n        </p>\n        <p>\n          Source: <a href=\"https://github.com/fafrd/disperse-nft-contract\">github.com/fafrd/disperse-nft-contract</a>\n        </p>\n      </header>\n\n      <main className={this.state.walletStatus === \"no-wallet-detected\" ? \"\" : \"hidden\"}>\n        <h3>No wallet detected. Install metamask: <a href=\"https://metamask.io/\">metamask.io</a></h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"wallet-not-connected\" ? \"\" : \"hidden\"}>\n        <h3>Connect your wallet to continue: <button id=\"connect\" type=\"button\" onClick={this.connectWallet}>Connect Wallet</button></h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"wrong-network\" ? \"\" : \"hidden\"}>\n        <h3>Switch a supported network to continue: </h3>\n        <ul>\n          {/* <li><h3><button className=\"switchNetwork\" id=\"button-ethereum\" type=\"button\" onClick={this.switchNetwork}>Ethereum</button></h3></li> */}\n          <li><h3><button className=\"switchNetwork\" id=\"button-rinkeby\" type=\"button\" onClick={this.switchNetwork}>Rinkeby testnet</button></h3></li>\n        </ul>\n      </main>\n\n      <main className={this.state.walletStatus === \"approve-pending\" ? \"\" : \"hidden\"}>\n        <h3>Sign transaction to approve NFT dispersal...</h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"approve-in-progress\" ? \"\" : \"hidden\"}>\n        <h3>Approval transaction in progress. Tx hash: {this.state.txnHash}</h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"disperse-pending\" ? \"\" : \"hidden\"}>\n        <h3>Sign transaction to disperse NFT...</h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"disperse-in-progress\" ? \"\" : \"hidden\"}>\n        <h3>Disperse tranasction in progress. Tx hash: {this.state.txnHash}</h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"disperse-success\" ? \"\" : \"hidden\"}>\n        <h3>NFT dispersal complete! {this.state.txnHash}</h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"transaction-fail\" ? \"\" : \"hidden\"}>\n        <h3>NFT dispersal failed!</h3>\n        <p><code>{this.state.failureReason}</code></p>\n        <h3><button id=\"reset\" type=\"button\" onClick={() => this.setState({walletStatus: \"\"})}>Reset</button></h3>\n      </main>\n\n      <main className={this.state.walletStatus === \"\" ? \"\" : \"hidden\"}>\n        <form autoComplete=\"off\">\n          <label htmlFor=\"contract\">NFT contract <i>(address)</i></label>\n          <div className=\"input-wrapper\">\n            <input type=\"text\" name=\"contract\" value={this.state.contract} autoComplete=\"off\" onChange={this.handleChange} maxLength=\"42\" placeholder=\"i.e. 0x73DA73EF3a6982109c4d5BDb0dB9dd3E3783f313\" />\n          </div>\n\n          <label htmlFor=\"recipients\">Recipients <i>(array of addresses, as strings)</i></label>\n          <div className=\"input-wrapper\">\n            <input type=\"text\" name=\"recipients\" value={this.state.recipients} autoComplete=\"off\" onChange={this.handleChange} placeholder='i.e. [\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\", \"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\", ...]' />\n          </div>\n\n          <label htmlFor=\"ids\">IDs <i>(array of NFT IDs, sorted, as strings)</i></label>\n          <div className=\"input-wrapper\">\n            <input type=\"text\" name=\"ids\" value={this.state.ids} autoComplete=\"off\" onChange={this.handleChange} placeholder='i.e. [\"21\", \"22\", \"23\"]' />\n          </div>\n\n          <label htmlFor=\"quantities\">Quantities <i>(array of quantities, order corresponding to IDs, as strings)</i></label>\n\n          <div className=\"input-radio-wrapper\">\n            <div className=\"input-radio-wrapper-item\">\n              <input type=\"radio\" id=\"quantityToggleManual\" name=\"quantityToggle\" value=\"quantityToggleManual\" onChange={this.handleChange} checked={this.state.quantityToggle === \"quantityToggleManual\"} />\n              <label htmlFor=\"quantityToggleManual\">Manual selection</label>\n            </div>\n            <div className=\"input-radio-wrapper-item\">\n              <input type=\"radio\" id=\"quantityToggleAuto\" name=\"quantityToggle\" value=\"quantityToggleAuto\" onChange={this.handleChange} checked={this.state.quantityToggle === \"quantityToggleAuto\"} />\n              <label htmlFor=\"quantityToggleAuto\">Automatic selection (1 of each ID, for each recipient)</label>\n            </div>\n          </div>\n\n          <div className=\"input-wrapper quantity-input\">\n            <input type=\"text\" name=\"quantities\" value={quantityValue} disabled={quantityDisabled} autoComplete=\"off\" onChange={this.handleChange} placeholder='i.e. [\"1\", \"2\", \"1\"]' />\n          </div>\n\n        </form>\n\n        {connectionStatusMessage}\n        <p>Contract: {contractPreview} <Validation valid={!this.state.contractError} /></p>\n        <p>Recipients: {recipientsPreview} <Validation valid={!this.state.recipientsError} /></p>\n        <p>NFT IDs: {idsPreview} <Validation valid={!this.state.idsError} /></p>\n        <p>Quantities: {quantitiesPreview} <Validation valid={this.state.quantityToggle === \"quantityToggleAuto\" || !this.state.quantitiesError} /></p>\n\n        <div className=\"button-container\">\n          <button id=\"disperse\" type=\"button\" disabled={buttonDisabled} onClick={this.handleSubmit}>Disperse</button>\n        </div>\n\n      </main>\n\n    </div>;\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}